package com.enderdincer.leetcode.q51;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.List;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;

public class TestCases {

    private static Stream<Arguments> queenNumToSolutionParams() {
        return Stream.of(
                Arguments.of(1, List.of(List.of("Q"))),
                Arguments.of(2, List.of()),
                Arguments.of(3, List.of()),
                Arguments.of(4, List.of(
                        List.of(".Q..", "...Q", "Q...", "..Q."),
                        List.of("..Q.", "Q...", "...Q", ".Q..")
                )),
                Arguments.of(5, List.of(
                        List.of("Q....", "..Q..", "....Q", ".Q...", "...Q."),
                        List.of("Q....", "...Q.", ".Q...", "....Q", "..Q.."),
                        List.of(".Q...", "...Q.", "Q....", "..Q..", "....Q"),
                        List.of(".Q...", "....Q", "..Q..", "Q....", "...Q."),
                        List.of("..Q..", "Q....", "...Q.", ".Q...", "....Q"),
                        List.of("..Q..", "....Q", ".Q...", "...Q.", "Q...."),
                        List.of("...Q.", "Q....", "..Q..", "....Q", ".Q..."),
                        List.of("...Q.", ".Q...", "....Q", "..Q..", "Q...."),
                        List.of("....Q", ".Q...", "...Q.", "Q....", "..Q.."),
                        List.of("....Q", "..Q..", "Q....", "...Q.", ".Q...")
                )),
                Arguments.of(6, List.of(
                        List.of(".Q....", "...Q..", ".....Q", "Q.....", "..Q...", "....Q."),
                        List.of("...Q..", "Q.....", "....Q.", ".Q....", ".....Q", "..Q..."),
                        List.of("..Q...", ".....Q", ".Q....", "....Q.", "Q.....", "...Q.."),
                        List.of("....Q.", "..Q...", "Q.....", ".....Q", "...Q..", ".Q....")
                )),
                Arguments.of(7, List.of(
                        List.of(".Q.....", "....Q..", "Q......", "...Q...", "......Q", "..Q....", ".....Q."),
                        List.of("..Q....", "Q......", ".....Q.", "...Q...", ".Q.....", "......Q", "....Q.."),
                        List.of("..Q....", "....Q..", "......Q", ".Q.....", "...Q...", ".....Q.", "Q......"),
                        List.of("....Q..", ".Q.....", ".....Q.", "..Q....", "......Q", "...Q...", "Q......"),
                        List.of("......Q", ".Q.....", "...Q...", ".....Q.", "Q......", "..Q....", "....Q.."),
                        List.of("......Q", "...Q...", "Q......", "....Q..", ".Q.....", ".....Q.", "..Q...."),
                        List.of(".Q.....", "....Q..", "......Q", "...Q...", "Q......", "..Q....", ".....Q."),
                        List.of("..Q....", ".....Q.", ".Q.....", "....Q..", "Q......", "...Q...", "......Q"),
                        List.of("....Q..", "Q......", ".....Q.", "...Q...", ".Q.....", "......Q", "..Q...."),
                        List.of("....Q..", "..Q....", "Q......", ".....Q.", "...Q...", ".Q.....", "......Q"),
                        List.of("Q......", "...Q...", "......Q", "..Q....", ".....Q.", ".Q.....", "....Q.."),
                        List.of("Q......", ".....Q.", "...Q...", ".Q.....", "......Q", "....Q..", "..Q...."),
                        List.of(".Q.....", "....Q..", "..Q....", "Q......", "......Q", "...Q...", ".....Q."),
                        List.of("...Q...", "Q......", "..Q....", ".....Q.", ".Q.....", "......Q", "....Q.."),
                        List.of("..Q....", "......Q", ".Q.....", "...Q...", ".....Q.", "Q......", "....Q.."),
                        List.of(".....Q.", "..Q....", "Q......", "...Q...", "......Q", "....Q..", ".Q....."),
                        List.of(".....Q.", "..Q....", "....Q..", "......Q", "Q......", "...Q...", ".Q....."),
                        List.of(".Q.....", "...Q...", "Q......", "......Q", "....Q..", "..Q....", ".....Q."),
                        List.of("..Q....", "Q......", ".....Q.", ".Q.....", "....Q..", "......Q", "...Q..."),
                        List.of("...Q...", "......Q", "..Q....", ".....Q.", ".Q.....", "....Q..", "Q......"),
                        List.of("...Q...", "......Q", "....Q..", ".Q.....", ".....Q.", "Q......", "..Q...."),
                        List.of(".....Q.", "...Q...", "......Q", "Q......", "..Q....", "....Q..", ".Q....."),
                        List.of("....Q..", "......Q", ".Q.....", "...Q...", ".....Q.", "Q......", "..Q...."),
                        List.of("......Q", "..Q....", ".....Q.", ".Q.....", "....Q..", "Q......", "...Q..."),
                        List.of("....Q..", "......Q", ".Q.....", ".....Q.", "..Q....", "Q......", "...Q..."),
                        List.of(".....Q.", "..Q....", "......Q", "...Q...", "Q......", "....Q..", ".Q....."),
                        List.of("......Q", "....Q..", "..Q....", "Q......", ".....Q.", "...Q...", ".Q....."),
                        List.of(".....Q.", "...Q...", ".Q.....", "......Q", "....Q..", "..Q....", "Q......"),
                        List.of("Q......", "..Q....", "....Q..", "......Q", ".Q.....", "...Q...", ".....Q."),
                        List.of("Q......", "....Q..", ".Q.....", ".....Q.", "..Q....", "......Q", "...Q..."),
                        List.of("..Q....", "......Q", "...Q...", "Q......", "....Q..", ".Q.....", ".....Q."),
                        List.of("...Q...", ".Q.....", "......Q", "....Q..", "..Q....", "Q......", ".....Q."),
                        List.of("...Q...", ".....Q.", "Q......", "..Q....", "....Q..", "......Q", ".Q....."),
                        List.of(".....Q.", ".Q.....", "....Q..", "Q......", "...Q...", "......Q", "..Q...."),
                        List.of(".Q.....", ".....Q.", "..Q....", "......Q", "...Q...", "Q......", "....Q.."),
                        List.of(".Q.....", "......Q", "....Q..", "..Q....", "Q......", ".....Q.", "...Q..."),
                        List.of("....Q..", "Q......", "...Q...", "......Q", "..Q....", ".....Q.", ".Q....."),
                        List.of(".....Q.", "Q......", "..Q....", "....Q..", "......Q", ".Q.....", "...Q..."),
                        List.of(".Q.....", "...Q...", ".....Q.", "Q......", "..Q....", "....Q..", "......Q"),
                        List.of("...Q...", "Q......", "....Q..", ".Q.....", ".....Q.", "..Q....", "......Q")
                ))
        );
    }

    @ParameterizedTest
    @MethodSource("com.enderdincer.leetcode.q51.TestCases#queenNumToSolutionParams")
    void nQueens(int boardSize, List<List<String>> solution) {
        final var result = new Solution().solveNQueens(boardSize);
        assertThat(result).containsExactlyInAnyOrderElementsOf(solution);
    }
}
